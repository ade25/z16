import getpass
from fabric.api import cd
from fabric.api import env
from fabric.api import local
from fabric.api import run
from fabric.api import task
from fabric.contrib.files import exists

from ade25.fabfiles import project
from ade25.fabfiles.server import controls
from ade25.fabfiles.server import setup
from ade25.fabfiles import hotfix as hf

from slacker import Slacker
slack = Slacker('${settings:slack-api-token}')

env.use_ssh_config = True
env.forward_agent = True
env.port = '22222'
env.user = 'root'
env.code_user = 'root'
env.prod_user = 'www'
env.hostname = '${fabric:hostname}'
env.webserver = '/opt/webserver/buildout.webserver'
env.code_root = '/opt/webserver/buildout.webserver'
env.host_root = '/opt/sites'
env.actor = ${settings:username}

env.hosts = ['z16']
env.hosted_sites = [
    '${sites:zope1}',
    '${sites:zope2}',
]

env.hosted_sites_locations = [
    '/opt/sites/${sites:zope1}/buildout.${sites:zope1}',
    '/opt/sites/${sites:zope2}/buildout.${sites:zope2}',
]


@task
def restart():
    """ Restart all """
    with cd(env.webserver):
        run('nice bin/supervisorctl restart all')


@task
def restart_nginx():
    """ Restart Nginx """
    controls.restart_nginx()


@task
def restart_varnish():
    """ Restart Varnish """
    controls.restart_varnish()


@task
def restart_haproxy():
    """ Restart HAProxy """
    controls.restart_haproxy()


@task
def ctl(*cmd):
    """Runs an arbitrary supervisorctl command."""
    with cd(env.webserver):
        run('nice bin/supervisorctl ' + ' '.join(cmd))


@task
def prepare_deploy():
    """ Push committed local changes to git """
    local('git push')


@task
def deploy(actor=None):
    """ Deploy current master to production server """
    opts = dict(
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    project.site.update()
    project.site.build()
    with cd(env.webserver):
        run('bin/supervisorctl reread')
        run('bin/supervisorctl update')
    msg = '[z16] z16.ade25.de server configuration deployed by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#general', msg, username=user, icon_emoji=icon)


@task
def update(sitename=None, actor=None):
    """ Deploy changes to a hosted site """
    opts = dict(
        sitename=sitename,
        actor=actor or env.get('actor') or getpass.getuser(),
    )
    path = '{0}/{1}/buildout.{2}'.format(env.host_root, sitename, sitename)
    with cd(path):
        run('nice git pull')
        run('nice bin/buildout -Nc deployment.cfg')
    with cd(env.webserver):
        run('nice bin/supervisorctl restart instance-%(sitename)s' % opts)
    msg = '[z16] %(sitename)s deployed by %(actor)s' % opts
    user = 'fabric'
    icon = ':shipit:'
    slack.chat.post_message('#general', msg, username=user, icon_emoji=icon)


@task
def add_ssl_cert(servername):
    """ Run letsencrypt commandline client and generate new certificate """
    cmd = './letsencrypt-auto certonly {0} {1}{2}{3} {4} {5}'.format(
        '-a webroot',
        '--webroot-path=',
        env.webserver,
        '/htdocs',
        '-d',
        servername)
    with cd('/opt/letsencrypt'):
        run(cmd)


@task
def add_zodb_pack_user(user=None, password=None):
    """ Add db pack user to all hosted instances

        @param user: Zope user allowed to pack databases
        @param password: A password only needed for packing
    """
    if user is None:
        print("A user is required")
    if password is None:
        print("A password is required")
    print('Please take note of the credentials inside the secret.cfg')
    for site in env.hosted_sites:
        location = '/opt/sites/{0}/buildout.{0}'.format(site)
        instance = 'instance-{0}'.format(site)
        with cd(env.webserver):
            run('bin/supervisorctl stop {0}'.format(instance))
        with cd(location):
            run('bin/instance adduser {0} {1}'.format(user, password))
        with cd(env.webserver):
            run('bin/supervisorctl start {0}'.format(instance))
    print('Database pack configured for all instances')


@task
def hotfix(addon=None):
    """ Apply hotfix to all hosted sites """
    hf.prepare_sites()
    hf.process_hotfix()


@task
def provision():
    """ Provision new machine

    This task should only ever be run once when provisioning a new
    physical machine. Particular errors caused by subtasks will cause
    the process to abort and the server will be left in an inconsistent
    state. Please take note of the specific error message in the console
    """
    setup.configure_fs()
    setup.set_project_user_and_group('www', 'www')
    setup.install_system_libs()
    setup.install_python_tools()
    setup.configure_egg_cache()
    setup.install_webserver()
    setup.setup_webserver_autostart()
    setup.setup_firewall()
